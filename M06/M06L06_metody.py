### ğŸ”´ Metody we wÅ‚asnych klasach

# W poprzedniej lekcji napisaliÅ›my najprostszÄ… klasÄ™, takÄ… ktÃ³ra ma tylko metodÄ™ specjalnÄ… __init__.

# Teraz pora dodaÄ‡ nowÄ…, zwykÅ‚Ä… metodÄ™.

# CzegoÅ› takiego nie moglibyÅ›my zrobiÄ‡, gdybyÅ›my reprezentowali wydatek jako sÅ‚ownik. DziÄ™ki zdefiniowaniu wÅ‚asnej klasy jest to jednak moÅ¼liwe.

class Expense:
    def __init__(self, amount, desc):
        self.amount = amount
        self.description = desc
        
    def get_amount_as_int(self):
        ''' Return amount in GROSZE as int.  '''
        return int(self.amount * 100)
    
e = Expense(6.50, "Ziemniaki")

print('e.amount =', e.amount)

# ZwrÃ³Ä‡ uwage, Å¼e wywoÅ‚ujÄ…c metodÄ™ nie podajesz self'a w nawias okrÄ…gÅ‚ych - bo jego podajesz przed kropkÄ….
grosze = e.get_amount_as_int()

print('Ziemniaki kosztowaÅ‚y', grosze, 'groszy.')

### ğŸ”´ Ä†wiczenie

# W poprzednim Ä‡wiczeniu zaimplementuj metodÄ™ RenameOperation.display(), ktÃ³ra wyÅ›wietla operacjÄ™, jaka zostanie wykonana. Wykorzystaj tÄ™ metodÄ™ w reszcie kodu.